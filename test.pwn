// generated by "sampctl package generate"

#include "account.inc"

new 
	gPlayerKills[MAX_PLAYERS],
	gPlayerDeaths[MAX_PLAYERS],
	Float: gPlayerHealth[MAX_PLAYERS],
	gPlayerPhrase[MAX_PLAYERS][30];

main() {
	// write tests for libraries here and run "sampctl package run"
}

public OnGameModeInit() {
	AddAccountData("kills", TYPE_INT, gPlayerKills);
	AddAccountData("deaths", TYPE_INT, gPlayerDeaths);
	AddAccountData("health", TYPE_FLOAT, gPlayerHealth);
	AddAccountData("phrase", TYPE_STRING, gPlayerPhrase);
	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[]) {

	if(!strcmp(cmdtext, "/register", true)) {
		if(IsPlayerLoggedIn(playerid)) 
			return SendClientMessage(playerid, 0xFF0000FF, "Already logged in!");

		new params[30] = cmdtext[10];

		if(!strlen(params)) {
			return SendClientMessage(playerid, 0xFF0000FF, "Usage: /register <password>");
		}

		if(!RegisterPlayer(playerid, params)) {
			SendClientMessage(playerid, 0xFF0000FF, "Username already registered!");
		} else {
			SendClientMessage(playerid, 0x00FF00FF, "Successfully registered!");
		}
		return 1;
	}

	if(!strcmp(cmdtext, "/login", true)) {
		if(IsPlayerLoggedIn(playerid))
			return SendClientMessage(playerid, 0xFF0000FF, "Already logged in!");

		new params[30] = cmdtext[7];

		if(!strlen(params)) {
			return SendClientMessage(playerid, 0xFF0000FF, "Usage: /login <password>");
		}

		if(!LoginPlayer(playerid, params)) {
			SendClientMessage(playerid, 0xFF0000FF, "Incorrect password!");
		} else {
			SendClientMessage(playerid, 0x00FF00FF, "Successfully logged in!");
		}
		return 1;
	}
	return 0;
}